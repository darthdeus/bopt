#!/usr/bin/env python
import sys
sys.path.append(".") # TODO: temporary hack

import re
import os
import glob
import myopt


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser()
    parser.add_argument("--recursive", type=bool, default=True, help="Search subdirectories for job files")
    parser.add_argument("meta_dir", type=str, default=".", help="Directory with the results.")
    parser.add_argument("job_id", type=int, default=".", help="Job id.")
    args = parser.parse_args()

    job_files = glob.glob(os.path.join(args.meta_dir, "**", "job-*.yml"), recursive=True)

    pattern = ".*job-(\\d+).yml"

    matches = [(fname, re.match(pattern, fname)) for fname in job_files]
    job_ids = [(fname, int(m.groups()[0])) for fname, m in matches if m is not None and len(m.groups()) == 1]

    if len(job_ids) == 0:
        print(f"No jobs found. Check that {args.meta_dir} contains job results.")
        sys.exit(1)

    matched_job_ids = [(fname, job_id) for fname, job_id in job_ids if job_id == args.job_id]

    if len(matched_job_ids) == 0:
        print(f"Job with id {args.job_id} not found in '{args.meta_dir}'.")
        sys.exit(1)
    elif len(matched_job_ids) > 1:
        print(f"Found more than one job with id {args.job_id} in '{args.meta_dir}'.")
        sys.exit(1)

    assert len(matched_job_ids) == 1

    fname, job_id = matched_job_ids[0]

    print(f"Found job {job_id} in {fname}")

